# -*- coding: utf-8 -*-
"""maskmaker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10uQ8dMc6uM_SUqZmOKROsw70BiziAmKt

# imports
"""

from __future__ import print_function
from __future__ import division
import numpy as np
import os
import random
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.metrics import confusion_matrix
import PIL.Image
import matplotlib.cm as cm
from IPython.display import Image, display
from collections import OrderedDict
import cv2
import itertools
import matplotlib.image

import torch
import torchvision
x = torch.rand(5, 3)
#print(x)
#print(torch.cuda.is_available())
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import time
import copy
#print("PyTorch Version: ",torch.__version__)
#print("Torchvision Version: ",torchvision.__version__)
from torchvision.models import *
from collections import OrderedDict

# Random seed for reproducibility
seed = 42
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)
np.random.seed(seed)
torch.manual_seed(seed)

#from google.colab import drive
#drive.mount('/gdrive')

"""# masks handling"""

train_data_path_covid='/data/data1/users/el17074/Infection Segmentation Data/Small_Test/COVID-19/images/'
#train_data_path_noncovid='/data/data1/users/el17074/Infection Segmentation Data/Test/Non-COVID/images/'
#train_data_path_normal='/data/data1/users/el17074/Infection Segmentation Data/Test/Normal/images/'

train_masks_path_covid='/data/data1/users/el17074/Infection Segmentation Data/Small_Test/COVID-19/lung masks/'
#train_masks_path_noncovid='/data/data1/users/el17074/Infection Segmentation Data/Test/Non-COVID/lung masks/'
#train_masks_path_normal='/data/data1/users/el17074/Infection Segmentation Data/Test/Normal/lung masks/'

save_path_covid='/data/data1/users/el17074/Infection Segmentation Data/Masked_Small_Test/COVID-19/'
#save_path_noncovid='/data/data1/users/el17074/Infection Segmentation Data/Masked_Test/Non-COVID/'
#save_path_normal='/data/data1/users/el17074/Infection Segmentation Data/Masked_Test/Normal/'



#names= next(os.walk(train_data_path))[2]
start_time = time.time()

'''
i = 0

path=train_data_path_noncovid
for filename in os.listdir(path):
  my_dest ="Non-COVID_" + str(i)+".png"
  my_source =path + filename 
  my_dest =path + my_dest
  os.rename(my_source, my_dest)
  i += 1

i = 0

path=train_masks_path_noncovid
for filename in os.listdir(path):
  my_dest ="Non-COVID_" + str(i)+".png"
  my_source =path + filename 
  my_dest =path + my_dest
  os.rename(my_source, my_dest)
  i += 1

i = 0

path=train_data_path_normal
for filename in os.listdir(path):
  my_dest ="Normal_" + str(i)+".png"
  my_source =path + filename 
  my_dest =path + my_dest
  os.rename(my_source, my_dest)
  i += 1

i = 0

path=train_masks_path_normal
for filename in os.listdir(path):
  my_dest ="Normal_" + str(i)+".png"
  my_source =path + filename 
  my_dest =path + my_dest
  os.rename(my_source, my_dest)
  i += 1



'''

names= next(os.walk(train_data_path_covid))[2]
for name in names:
  im1 = cv2.imread(train_data_path_covid+name)  
  im2 = cv2.imread(train_masks_path_covid+name)

  (minVal, maxVal, minLoc, topspot) = cv2.minMaxLoc(im2[:,:,0])#kratao topspot

  leftspot=None
  for x in range(0,128):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        leftspot=(x,y)
        break
    if leftspot!=None:
      break

  rightspot=None
  for x in range(255,128,-1):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        rightspot=(x,y)
        break
    if rightspot!=None:
      break

  newim2=im2
  for x in range(0,255):
    for y in range(0,255):
      if x>leftspot[0] and x<rightspot[0] and y>topspot[1]:
        newim2[y,x,0]=255
        newim2[y,x,1]=255
        newim2[y,x,2]=255

  im4=cv2.bitwise_and(im1,newim2,mask = None)
  im4 = transforms.ToPILImage()(im4).convert("RGB")
  im4.save(save_path_covid+name)



names1= next(os.walk(train_data_path_noncovid))[2]
for name in names1:
  print(name)
  #name= name.replace(" ","_")
  im1 = cv2.imread(train_data_path_noncovid + name)  
  im2 = cv2.imread(train_masks_path_noncovid + name)

  (minVal, maxVal, minLoc, topspot) = cv2.minMaxLoc(im2[:,:,0])#kratao topspot

  leftspot=None
  for x in range(0,128):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        leftspot=(x,y)
        break
    if leftspot!=None:
      break

  rightspot=None
  for x in range(255,128,-1):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        rightspot=(x,y)
        break
    if rightspot!=None:
      break

  newim2=im2
  for x in range(0,255):
    for y in range(0,255):
      if x>leftspot[0] and x<rightspot[0] and y>topspot[1]:
        newim2[y,x,0]=255
        newim2[y,x,1]=255
        newim2[y,x,2]=255

  im4=cv2.bitwise_and(im1,newim2,mask = None)
  im4 = transforms.ToPILImage()(im4).convert("RGB")
  im4.save(save_path_noncovid + name)

#names= next(os.walk(train_data_path))[2]
names2= next(os.walk(train_data_path_normal))[2]
for name in names2:
  #print(len(name))
  im1 = cv2.imread(train_data_path_normal + name)  
  im2 = cv2.imread(train_masks_path_normal + name)

  (minVal, maxVal, minLoc, topspot) = cv2.minMaxLoc(im2[:,:,0])#kratao topspot

  leftspot=None
  for x in range(0,128):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        leftspot=(x,y)
        break
    if leftspot!=None:
      break
  rightspot=None
  for x in range(255,128,-1):
    for y in range(255,0,-1):
      if im2[y,x,0]==255:  
        rightspot=(x,y)
        break
    if rightspot!=None:
      break

  newim2=im2
  for x in range(0,255):
    for y in range(0,255):
      if x>leftspot[0] and x<rightspot[0] and y>topspot[1]:
        newim2[y,x,0]=255
        newim2[y,x,1]=255
        newim2[y,x,2]=255
   
  
  im4=cv2.bitwise_and(im1,newim2,mask = None)
  #print(type(im4))
  im4 = transforms.ToPILImage()(im4).convert("RGB")
  #print(type(im4))

  im4.save(save_path_normal + name)


print("--- %s seconds ---" % (time.time() - start_time))

