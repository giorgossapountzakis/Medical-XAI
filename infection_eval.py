# -*- coding: utf-8 -*-
"""infection_eval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JwOPlkxWRa2Nj8ZseTWh6SBg4-yJG8Z1
"""

from __future__ import print_function
from __future__ import division
import numpy as np
import os
import random
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.metrics import confusion_matrix
import PIL.Image
import matplotlib.cm as cm
from IPython.display import Image, display
from collections import OrderedDict
import cv2
import itertools
import matplotlib.image

import torch
import torchvision
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import time
import copy
from torchvision.models import *
from collections import OrderedDict
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from pytorch_grad_cam import GradCAM, HiResCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM, FullGrad
from pytorch_grad_cam import GuidedBackpropReLUModel
from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget,RawScoresOutputTarget #an to kaleso me ari8mo eksigi gia tin katigoria ayti
from pytorch_grad_cam.utils.image import show_cam_on_image ,deprocess_image,preprocess_image
from pytorch_grad_cam.metrics.road import ROADCombined


# Random seed for reproducibility
seed = 42
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)
np.random.seed(seed)
torch.manual_seed(seed)

"""# dataset handling"""

labels=['COVID-19','Non-COVID','Normal']

"""# normalization"""

norm_transforms = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      #transforms.Normalize([0.5, 0.5, 0.5],[0.224, 0.224, 0.224]),
                                       ])

"""# data loading"""

my_transforms = norm_transforms
image_datasets = {x: datasets.ImageFolder('/data/data1/users/el17074/Infection Segmentation Data/'+x, transform=my_transforms) for x in ['Small_Test']}#Masked_Small_Test
Small_testdata_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=False) for x in ['Small_Test']}
inf_image_datasets = {x: datasets.ImageFolder('/data/data1/users/el17074/Infection Segmentation Data/'+x, transform=my_transforms) for x in ['Small_Test']}#ed_Small_Test
inf_testdata_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=False) for x in ['Small_Test']}


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

"""# model selection(change here for fcmiddlenumber and .fc)"""



path='/data/data1/users/el17074/mymodels/efficientnet/efficientnethyperparameters2/'
fcmiddlenumber=512		
model1= models.efficientnet_b0(weights=EfficientNet_B0_Weights.DEFAULT)
num_ftrs = model1.classifier[1].in_features
model1.classifier =  nn.Sequential(OrderedDict([('fc1', nn.Linear(num_ftrs, fcmiddlenumber)),('relu', nn.ReLU()),('dropout',nn.Dropout()),('fc2', nn.Linear(fcmiddlenumber, 3))]))
model1.load_state_dict(torch.load(path+'weights.pt'))
model1=model1.to(device)
model1.eval()




"""# predictions (change here depending on parameters)"""
print(path)
#1 batch prediction
#inf_inputs, inf_classes = next(iter(inf_testdata_dict['Small_Test']))
inputs, classes = next(iter(Small_testdata_dict['Small_Test']))
rawinputs=inputs
model1 = model1.to(device)
#inf_inputs=inf_inputs.to(device)
inputs=inputs.to(device)
with torch.no_grad(): 
  outputs=model1(inputs)
  _, preds = torch.max(outputs, 1)
  preds=preds.cpu().numpy()
  classes=classes.numpy()

print(preds)
print(classes)


"""# Basic GradCAM"""

from pytorch_grad_cam import GradCAM, HiResCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM, FullGrad
from pytorch_grad_cam import GuidedBackpropReLUModel
from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget,RawScoresOutputTarget #an to kaleso me ari8mo eksigi gia tin katigoria ayti
from pytorch_grad_cam.utils.image import show_cam_on_image ,deprocess_image,preprocess_image
from pytorch_grad_cam.metrics.road import *

print('Basic GradCAM')
start_time = time.time()
model = model1
#ALLAZO TO LAYER EDO -----------------------------------------------------------
target_layers = [model.features[-1]]
with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)

inf_inputs= os.listdir('/data/data1/users/el17074/Infection Segmentation Data/Test/COVID-19/infection masks/') #na do ayto ti kanei
inf_inputs=sorted(inf_inputs)

from PIL import Image
from PIL import ImageOps
#kathe eikona me th problepsi kai to gradcam poy thn aitiologei
fig, ax = plt.subplots(8,4, figsize=(30, 30))
x,y=0,-1
for i in range(0,32):

  im_og = transforms.ToPILImage()(inputs[i]).convert('RGB')
  im_og = np.asarray(im_og, dtype="float32" )/255
  im_gradcam = show_cam_on_image(im_og, grayscale_cam[i], use_rgb=True)  
  	
  im_mask=cv2.imread('/data/data1/users/el17074/Infection Segmentation Data/Small_Test/COVID-19/infection masks/'+str(inf_inputs[i]))
  im_mask=cv2.resize(im_mask,(224,224))
  im_gradcam = im_gradcam[:, :, ::-1]


  im=cv2.bitwise_and(im_mask,im_gradcam ,mask= None)
  im_gradcam = im_gradcam[:, :, ::-1]
  im=im[:, :, ::-1]

  im_og = transforms.ToPILImage()(inputs[i]).convert('RGB')
  im_og=np.array(im_og)
  im_mask=np.array(im_mask)
  visualization=np.hstack((im_og,im_gradcam, im_mask,im))
  visualization=transforms.ToPILImage()(visualization)
  plt.imshow(visualization)

  
  if i%4==0:
    x=0
    y+=1
  ax[y,x].imshow(visualization)
  #ax[y,x].set_title('class '+ str(preds[i]))
  x+=1
plt.savefig(path+'Infection_gradcam_on_batch_corrected.png')


