# -*- coding: utf-8 -*-
"""maskedtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19cgoJlWiOteR7WGH77VOyNUnBLvgw96u
"""

from __future__ import print_function
from __future__ import division
import numpy as np
import os
import random
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.metrics import confusion_matrix
import PIL.Image
import matplotlib.cm as cm
from IPython.display import Image, display
from collections import OrderedDict
import cv2
import itertools
import matplotlib.image

import torch
import torchvision
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import time
import copy
from torchvision.models import *
from collections import OrderedDict
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from pytorch_grad_cam import GradCAM, HiResCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM, FullGrad
from pytorch_grad_cam import GuidedBackpropReLUModel
from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget,RawScoresOutputTarget #an to kaleso me ari8mo eksigi gia tin katigoria ayti
from pytorch_grad_cam.utils.image import show_cam_on_image ,deprocess_image,preprocess_image
from pytorch_grad_cam.metrics.road import ROADCombined

seed = 42
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)
np.random.seed(seed)
torch.manual_seed(seed)

labels=['COVID-19','Non-COVID','Normal']

train_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Train'
valid_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Val'
test_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Test'
small_test_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Small_Test'
Masked_small_test_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Small_Test'
"""# normalization"""

norm_transforms = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      #transforms.Normalize([0.5, 0.5, 0.5],[0.224, 0.224, 0.224]),
                                       ])

"""# data loading"""

my_transforms = norm_transforms
image_datasets = {x: datasets.ImageFolder('/data/data1/users/el17074/my_data/Lung Segmentation Data/'+x, transform=my_transforms) for x in ['Masked_Train','Masked_Test', 'Masked_Val','Masked_Small_Test']}
#dataloaders_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=True) for x in ['Masked_Train', 'Masked_Val']}
testdata_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=True) for x in ['Masked_Test']}
Small_testdata_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=False) for x in ['Masked_Small_Test']}


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

"""# model selection(change here for fcmiddlenumber and .fc)"""

path='/data/data1/users/el17074/mymodels/vgg/vgg19gridsearched/'
fcmiddlenumber=256#model0_params['fcmiddlenumber']#500
model1= models.vgg19()
num_ftrs = model1.classifier[0].in_features #classifier[0] gia vgg, classifier gia densenet,fc giaresnet
model1.classifier =  nn.Sequential(OrderedDict([('fc1', nn.Linear(num_ftrs, fcmiddlenumber)),('relu', nn.ReLU()),('dropout',nn.Dropout()),('fc2', nn.Linear(fcmiddlenumber, 3))]))
model1.load_state_dict(torch.load(path+'weights.pt'))
model1=model1.to(device)
model1.eval()


"""# predictions (change here depending on parameters)"""
print(path)
#kanei gia 15 batch
count=0
allclasses=torch.Tensor()
allinputs=torch.Tensor()
for inputs, classes in testdata_dict['Masked_Test']:
  allclasses= torch.cat((allclasses, classes), 0)
  allinputs= torch.cat((allinputs, inputs), 0)
  count=count+1
  if count==8:
    break
model1 = model1.to(device)
allinputs=allinputs.to(device)
with torch.no_grad(): 
  outputs=model1(allinputs)
  _, preds = torch.max(outputs, 1)
  preds=preds.cpu().numpy()
  classes=allclasses.numpy()

#print(preds)
#print(classes)
confusion = confusion_matrix(classes, preds)
print('Confusion Matrix\n')
print(confusion)
print('\nAccuracy: {:.2f}\n'.format(accuracy_score(classes, preds)))
print('Micro Precision: {:.2f}'.format(precision_score(classes, preds, average='micro')))
print('Micro Recall: {:.2f}'.format(recall_score(classes, preds, average='micro')))
print('Micro F1-score: {:.2f}\n'.format(f1_score(classes, preds, average='micro')))
print('Macro Precision: {:.2f}'.format(precision_score(classes, preds, average='macro')))
print('Macro Recall: {:.2f}'.format(recall_score(classes, preds, average='macro')))
print('Macro F1-score: {:.2f}\n'.format(f1_score(classes, preds, average='macro')))
print('Weighted Precision: {:.2f}'.format(precision_score(classes, preds, average='weighted')))
print('Weighted Recall: {:.2f}'.format(recall_score(classes, preds, average='weighted')))
print('Weighted F1-score: {:.2f}'.format(f1_score(classes, preds, average='weighted')))
print('\nClassification Report\n')
classification_report=classification_report(classes, preds, target_names=['COVID-19','Non-COVID','Normal'])
print(classification_report)

f = open(path+'Masked_readme.txt', "w")


f.write(np.array2string(confusion, separator=', '))
f.write('\n')
f.write('\nAccuracy: {:.2f}\n'.format(accuracy_score(classes, preds)))
f.write('\n')
f.write('Micro Precision: {:.2f}'.format(precision_score(classes, preds, average='micro')))
f.write('\n')
f.write('Micro Recall: {:.2f}'.format(recall_score(classes, preds, average='micro')))
f.write('\n')
f.write('Micro F1-score: {:.2f}\n'.format(f1_score(classes, preds, average='micro')))
f.write('\n')
f.write('Macro Precision: {:.2f}'.format(precision_score(classes, preds, average='macro')))
f.write('\n')
f.write('Macro Recall: {:.2f}'.format(recall_score(classes, preds, average='macro')))
f.write('\n')
f.write('Macro F1-score: {:.2f}\n'.format(f1_score(classes, preds, average='macro')))
f.write('\n')
f.write('Weighted Precision: {:.2f}'.format(precision_score(classes, preds, average='weighted')))
f.write('\n')
f.write('Weighted Recall: {:.2f}'.format(recall_score(classes, preds, average='weighted')))
f.write('\n')
f.write('Weighted F1-score: {:.2f}'.format(f1_score(classes, preds, average='weighted')))
f.write('\n')
f.write(classification_report)

f.close()

#1 batch prediction
inputs, classes = next(iter(Small_testdata_dict['Masked_Small_Test']))
rawinputs=inputs
model1 = model1.to(device)
inputs=inputs.to(device)
with torch.no_grad(): 
  outputs=model1(inputs)
  _, preds = torch.max(outputs, 1)
  preds=preds.cpu().numpy()
  classes=classes.numpy()

print(preds)
print(classes)

foundcov=False
foundnoncov=False
foundnormal=False
covposition,noncovposition,normalposition=None,None,None
i=0
for item in classes:
  if foundcov==False or foundnoncov==False or foundnormal==False:
    if classes[i]==0 and foundcov==False:
      covposition=i
      foundcov=True
    elif classes[i]==1 and foundnoncov==False:
      noncovposition=i
      foundnoncov=True
    elif classes[i]==2 and foundnormal==False:
      normalposition=i
      foundnormal=True
    i=i+1
print(covposition,noncovposition,normalposition)

"""# Basic GradCAM"""

from pytorch_grad_cam import GradCAM, HiResCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM, FullGrad
from pytorch_grad_cam import GuidedBackpropReLUModel
from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget,RawScoresOutputTarget #an to kaleso me ari8mo eksigi gia tin katigoria ayti
from pytorch_grad_cam.utils.image import show_cam_on_image ,deprocess_image,preprocess_image
from pytorch_grad_cam.metrics.road import ROADCombined




print('Basic GradCAM')
start_time = time.time()
model = model1
target_layers = [model.features[-1]]
with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[covposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization0 = show_cam_on_image(im, grayscale_cam[covposition], use_rgb=True)
  visualization0 = transforms.ToPILImage()(visualization0)
  visualizationcov=visualization0
#display(visualization0)




input_img = preprocess_image(im)
gb_model = GuidedBackpropReLUModel(model=model, use_cuda=True)#True
gb = gb_model(input_img, target_category=None)

cam_mask = cv2.merge([grayscale_cam[covposition], grayscale_cam[covposition], grayscale_cam[covposition]])
cam_gb = deprocess_image(cam_mask*gb)
gb = deprocess_image(gb)
gb = transforms.ToPILImage()(gb)
#display(gb)
cam_gb = transforms.ToPILImage()(cam_gb)
#display(cam_gb)
fig, ax = plt.subplots(1,4, figsize=(25, 25))
ax[0].imshow(rawinputs[covposition].permute(1,2,0))
ax[0].set_title('Masked_Original Image (COVID-19)')
ax[1].imshow(visualization0)
ax[1].set_title('GradCAM')
ax[2].imshow(gb)
ax[2].set_title('GuidedBackprop')
ax[3].imshow(cam_gb)
ax[3].set_title('GradCAM+GuidedBackprop')
plt.savefig(path+'Masked_gradcam+guidedbackprop_COVID-19.png')


with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[noncovposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization0 = show_cam_on_image(im, grayscale_cam[noncovposition], use_rgb=True)
  visualization0 = transforms.ToPILImage()(visualization0)
#display(visualization0)

input_img = preprocess_image(im)
gb_model = GuidedBackpropReLUModel(model=model, use_cuda=True)#True
gb = gb_model(input_img, target_category=None)

cam_mask = cv2.merge([grayscale_cam[noncovposition], grayscale_cam[noncovposition], grayscale_cam[noncovposition]])
cam_gb = deprocess_image(cam_mask*gb)
gb = deprocess_image(gb)
gb = transforms.ToPILImage()(gb)
#display(gb)
cam_gb = transforms.ToPILImage()(cam_gb)
#display(cam_gb)
fig, ax = plt.subplots(1,4, figsize=(25, 25))
ax[0].imshow(rawinputs[noncovposition].permute(1,2,0))
ax[0].set_title('Masked_Original Image (Non-COVID)')
ax[1].imshow(visualization0)
ax[1].set_title('GradCAM')
ax[2].imshow(gb)
ax[2].set_title('GuidedBackprop')
ax[3].imshow(cam_gb)
ax[3].set_title('GradCAM+GuidedBackprop')
plt.savefig(path+'Masked_gradcam+guidedbackprop_Non-COVID.png')

with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[normalposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization0 = show_cam_on_image(im, grayscale_cam[normalposition], use_rgb=True)
  visualization0 = transforms.ToPILImage()(visualization0)
#display(visualization0)

input_img = preprocess_image(im)
gb_model = GuidedBackpropReLUModel(model=model, use_cuda=True)#True
gb = gb_model(input_img, target_category=None)

cam_mask = cv2.merge([grayscale_cam[normalposition], grayscale_cam[normalposition], grayscale_cam[normalposition]])
cam_gb = deprocess_image(cam_mask*gb)
gb = deprocess_image(gb)
gb = transforms.ToPILImage()(gb)
#display(gb)
cam_gb = transforms.ToPILImage()(cam_gb)
#display(cam_gb)
fig, ax = plt.subplots(1,4, figsize=(25, 25))
ax[0].imshow(rawinputs[normalposition].permute(1,2,0))
ax[0].set_title('Masked_Original Image (Normal)')
ax[1].imshow(visualization0)
ax[1].set_title('GradCAM')
ax[2].imshow(gb)
ax[2].set_title('GuidedBackprop')
ax[3].imshow(cam_gb)
ax[3].set_title('GradCAM+GuidedBackprop')
plt.savefig(path+'Masked_gradcam+guidedbackprop_Normal.png')


#kathe eikona me th problepsi kai to gradcam poy thn aitiologei
fig, ax = plt.subplots(8,4, figsize=(15, 15))
x,y=0,-1
for i in range(0,32):
  im = transforms.ToPILImage()(inputs[i]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  visualization = show_cam_on_image(im, grayscale_cam[i], use_rgb=True)
  visualization = transforms.ToPILImage()(visualization)
  
  if i%4==0:
    x=0
    y+=1
  ax[y,x].imshow(visualization)
  ax[y,x].set_title('class '+ str(preds[i]))
  x+=1
plt.savefig(path+'Masked_gradcam_on_batch.png')
print("--- %s seconds ---" % (time.time() - start_time))


"""# GradCAM Layer Comparison"""

print('GradCAM Layer comparison')
start_time = time.time()
target_layers = [model.features[28]]#[model.layer4[-1]] #na dokimaso kai me .conv3 sto ka8ena
with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[covposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization1 = show_cam_on_image(im, grayscale_cam[covposition], use_rgb=True)
  visualization1 = transforms.ToPILImage()(visualization1)

target_layers = [model.features[19]]#[model.layer4[-1]]
with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[covposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization2 = show_cam_on_image(im, grayscale_cam[covposition], use_rgb=True)
  visualization2 = transforms.ToPILImage()(visualization2)

target_layers = [model.features[10]]#[model.layer4[-1]]
with GradCAM(model=model, target_layers=target_layers,use_cuda=True) as cam:
  im = transforms.ToPILImage()(inputs[covposition]).convert('RGB')
  im = np.asarray(im, dtype="float32" )/255
  input_tensor = inputs
  targets = None #xrisimopoiei ta preds oysiastika
  grayscale_cam= cam(input_tensor=input_tensor, targets=targets,aug_smooth=True,eigen_smooth=True)
  visualization3 = show_cam_on_image(im, grayscale_cam[covposition], use_rgb=True)
  visualization3 = transforms.ToPILImage()(visualization3)

fig, ax = plt.subplots(1,5, figsize=(25, 25))
ax[0].imshow(rawinputs[0].permute(1,2,0))
ax[0].set_title('Masked_Original Image (COVID-19)')
ax[4].imshow(visualizationcov)
ax[4].set_title('GradCAM on block4 last layer')
ax[3].imshow(visualization1)
ax[3].set_title('GradCAM on block3 last layer')
ax[2].imshow(visualization2)
ax[2].set_title('GradCAM on block2 last layer')
ax[1].imshow(visualization3)
ax[1].set_title('GradCAM on block1 last layer')
plt.savefig(path+'Masked_gradcam_layer_comparison.png')
print("--- %s seconds ---" % (time.time() - start_time))

