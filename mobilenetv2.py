# -*- coding: utf-8 -*-
"""densenet121.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b1npEWxZESHbrV3jkPBit0tKt3Bu6khC

# imports
"""

from __future__ import print_function
from __future__ import division
import numpy as np
import os
import random
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.metrics import confusion_matrix
import PIL.Image
import matplotlib.cm as cm
from IPython.display import Image, display
from collections import OrderedDict
import cv2
import itertools
import matplotlib.image

import torch
import torchvision
#x = torch.rand(5, 3)
#print(x)
#print(torch.cuda.is_available())
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import time
import copy
print("PyTorch Version: ",torch.__version__)
print("Torchvision Version: ",torchvision.__version__)
from torchvision.models import *
from collections import OrderedDict

# Random seed for reproducibility
seed = 42
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)
np.random.seed(seed)
torch.manual_seed(seed)

"""# dataset handling"""

labels=['COVID-19','Non-COVID','Normal']

train_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Train'
valid_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Val'
test_data_path='/data/data1/users/el17074/my_data/Lung Segmentation Data/Masked_Test'

"""# normalization"""

norm_transforms = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(225),#mallon 225 eixa balei
                                      transforms.ToTensor(),
                                      #transforms.Normalize([0.5, 0.5, 0.5],[0.224, 0.224, 0.224]),
                                       ])

#[0.0169, 0.0169, 0.0169],[0.0069, 0.0069, 0.0069]
#[0.485, 0.456, 0.406],[0.229, 0.224, 0.225]


"""# data loading"""

my_transforms = norm_transforms
image_datasets = {x: datasets.ImageFolder('/data/data1/users/el17074/my_full_data/Lung Segmentation Data/'+x, transform=my_transforms) for x in ['Masked_Train','Masked_Test', 'Masked_Val']}
dataloaders_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=True) for x in ['Masked_Train', 'Masked_Val']}
testdata_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=32, shuffle=True) for x in ['Masked_Test']}

"""# helper functions"""

def train_model(model, dataloaders, criterion, optimizer, scheduler, num_epochs=25, is_inception=False):
    #since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['Masked_Train', 'Masked_Val']:
            if phase == 'Masked_Train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'Masked_Train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                    if is_inception and phase == 'Masked_Train':
                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958
                        outputs, aux_outputs = model(inputs)
                        loss1 = criterion(outputs, labels)
                        loss2 = criterion(aux_outputs, labels)
                        loss = loss1 + 0.4*loss2
                    else:
                        outputs = model(inputs)
                        loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'Masked_Train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
                
            scheduler.step()

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'Masked_Val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'Masked_Val':
                val_acc_history.append(epoch_acc)

        print()

    #time_elapsed = time.time() - since
    #print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history,best_acc

def set_parameter_requires_grad(model, feature_extracting):
    if feature_extracting:
        for param in model.parameters():
            param.requires_grad = False

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)


"""# build model without class(comment all if gridsearch)"""

'''

fcmiddlenumber=512
numberoftraininglayers=2
model1= models.mobilenet_v2(weights=MobileNet_V2_Weights.DEFAULT)
set_parameter_requires_grad(model1, True)
num_ftrs = model1.classifier[1].in_features
if numberoftraininglayers==2 :      
    for param in model1.features[10:].parameters():
        param.requires_grad = True
        print("it works")
model1.classifier =  nn.Sequential(OrderedDict([('fc1', nn.Linear(num_ftrs, fcmiddlenumber)),('relu', nn.ReLU()),('dropout',nn.Dropout()),('fc2', nn.Linear(fcmiddlenumber, 3))]))
model1 = model1.to(device)

params_to_update = model1.parameters()
print("Params to learn:")
params_to_update = []
for name,param in model1.named_parameters():
    if param.requires_grad == True:
      params_to_update.append(param)
      print("\t",name)

"""# training(comment all if gridsearch)"""
path='/data/data1/users/el17074/mymodels/mobilenet/mobilenetv2masked/'


optimizer= optim.SGD(model1.parameters(), lr=0.01, momentum=0.9)
criterion = nn.CrossEntropyLoss()
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)
# Train and evaluate
start_time = time.time()
model1, hist,best_acc = train_model(model1, dataloaders_dict, criterion, optimizer,scheduler, num_epochs=8, is_inception=False)
print("--- %s seconds ---" % (time.time() - start_time))
torch.save(model1.state_dict(),path+'weights.pt')

'''
"""# grid search(comment all if not gridsearch)"""

path='/data/data1/users/el17074/mymodels/mobilenet/mobilenetv2hyperparameters/'
def grid_search(dataloaders_dict, num_epochs):
    # Define the parameter grid
    param_grid = {'lr': [0.1,0.05,0.01,0.005],
                  'momentum': [0.9],
                  'step_size': [3,5],
                  'gamma': [0.1,0.3],
                  'numberoftraininglayers':[2],
                  'fcmiddlenumber': [512]
                  }

    
    
    # Get all possible combinations of the parameter grid
    param_combinations = list(itertools.product(*(param_grid[param] for param in param_grid)))
    print(len(param_combinations))
    start_time = time.time()
    best_acc = 0
    best_params = {}
    best_model = None
    # Iterate over all parameter combinations
    for lr, momentum, step_size, gamma ,numberoftraininglayers,fcmiddlenumber in param_combinations:

        model1= models.mobilenet_v2(weights=MobileNet_V2_Weights.DEFAULT)
        set_parameter_requires_grad(model1, True)
        num_ftrs = model1.classifier[1].in_features
        
        if numberoftraininglayers==1:
            for param in model1.features[14:].parameters():
                param.requires_grad = True
        elif numberoftraininglayers==2:
            for param in model1.features[10:].parameters():
                param.requires_grad = True
        if numberoftraininglayers==3:
            for param in model1.features[6:].parameters():
                param.requires_grad = True
        model1.classifier =  nn.Sequential(OrderedDict([('fc1', nn.Linear(num_ftrs, fcmiddlenumber)),('relu', nn.ReLU()),('dropout',nn.Dropout()),('fc2', nn.Linear(fcmiddlenumber, 3))]))
        model1.load_state_dict(torch.load('/data/data1/users/el17074/mymodels/mobilenet/mobilenetv2masked/'+'weights.pt'))
        model1 = model1.to(device)

        # Define the optimizer
        optimizer = optim.SGD(model1.parameters(), lr=lr, momentum=momentum)
        # Define the criterion
        criterion = nn.CrossEntropyLoss()
        # Define the scheduler
        scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=step_size, gamma=gamma)
        # Train and evaluate the model
        if numberoftraininglayers==2 or numberoftraininglayers==3:
          model_temp, hist ,train_best_acc= train_model(model1, dataloaders_dict, criterion, optimizer, scheduler, num_epochs, is_inception=False)
        else:
          model_temp, hist ,train_best_acc= train_model(model1, dataloaders_dict, criterion, optimizer, scheduler, num_epochs, is_inception=False)
        # Get the accuracy from the history
        acc = train_best_acc
        # Update the best accuracy and best parameters if necessary
        if acc > best_acc:
            best_acc = acc
            best_params = {'lr': lr, 'momentum': momentum, 'step_size': step_size, 'gamma': gamma, 'numberoftraininglayers':numberoftraininglayers, 'fcmiddlenumber':fcmiddlenumber }
            best_model = model_temp
            best_model_hist = hist
        print("--- %s seconds ---" % (time.time() - start_time))
    return best_model, best_params, best_acc, best_model_hist



start_time = time.time()
model0,model0_params,model0_acc,model0_hist=grid_search(dataloaders_dict, 5)
torch.save(model0.state_dict(),path+'weights.pt')
print(model0_params)
print(model0_acc)
print(model0_hist)
print("--- %s seconds ---" % (time.time() - start_time))


f = open(path+'readme.txt', "w")

f.write(str(model0_params['lr']))
f.write(str(model0_params['momentum']))
f.write(str(model0_params['step_size']))
f.write(str(model0_params['gamma']))
f.write(str(model0_params['numberoftraininglayers']))
f.write(str(model0_params['fcmiddlenumber']))
f.write("--- %s seconds ---" % (time.time() - start_time))

f.close()






